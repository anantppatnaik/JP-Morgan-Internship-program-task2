//App.tsx:

import React, { Component } from 'react';
import Graph from './Graph';

interface IState {
  data: any;
  showGraph: boolean;
}

class App extends Component<{}, IState> {
  constructor(props: {}) {
    super(props);
    this.state = {
      data: [],
      showGraph: false // Initial state of the graph is hidden
    };
  }

  componentDidMount() {
    // Call getDataFromServer method periodically
    setInterval(this.getDataFromServer, 1000); // Adjust interval as needed
  }

  getDataFromServer = () => {
    // Fetch data from server
    // Update this.state.data with fetched data
  }

  handleClick = () => {
    // Toggle showGraph state when button is clicked
    this.setState({ showGraph: !this.state.showGraph });
  }

  renderGraph = () => {
    if (this.state.showGraph) {
      return <Graph data={this.state.data} />;
    }
  }

  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Start Streaming Data</button>
        {this.renderGraph()}
      </div>
    );
  }
}

export default App;

//'Graph.tsx:

import React, { Component } from 'react';

interface IProps {
  data: any;
}

class Graph extends Component<IProps> {
  componentDidMount() {
    // Logic for initializing PerspectiveViewerElement
    const elem: HTMLElement = document.getElementsByTagName('perspective-viewer')[0];
    elem.setAttribute('view', 'y_line');
    elem.setAttribute('column-pivots', '["stock"]');
    elem.setAttribute('row-pivots', '["timestamp"]');
    elem.setAttribute('columns', '["top_ask_price"]');
    elem.setAttribute('aggregates', '{"stock":"distinct count","timestamp":"distinct count","top_ask_price":"avg","top_bid_price":"avg"}');
  }

  render() {
    return (
      <perspective-viewer style={{ height: '400px' }} />
    );
  }
}

export default Graph;
